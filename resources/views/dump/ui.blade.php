@section('title', 'Event Mapper')
@extends('layouts.master')


@section('head')

    {{-- leaflet css --}}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
        integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
        crossorigin="" />
    <link rel="stylesheet" href="https://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.css">
    <script src="https://unpkg.com/vue@2"></script>

    {{-- load vue components --}}
    {{-- load shimmer --}}
    <script src="/assets/js/components/shimmer-card/index.js"></script>
    <link rel="stylesheet" href="/assets/js/components/shimmer-card/shimmer.css">
    {{-- load event card --}}
    <script src="/assets/js/components/event-card/index.js"></script>

    {{-- load event detail --}}
    <script src="/assets/js/components/event-detail/index.js"></script>

    <style>
        #mapid {
            min-height: 100vh;
        }

        .close-btn {
            cursor: pointer;
            background-color: #f0f0f1;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            width: 38px;
            height: 38px;
            border-radius: 50%;
            color: #25396f;
            margin-top: 10px;
            margin-right: 10px;
            border: none;
        }

        .popular-places {
            background-color: white;
            border-radius: 5px;
            display: inline;
            padding-top: 10px;
            padding-bottom: 10px;
            padding-left: 10px;
            padding-right: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        }

        body {
            overflow-x: hidden;
        }

        #event-list {
            height: 100vh;
            overflow-y: scroll;
        }

        .slide-top {
            -webkit-animation: slide-top 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
            animation: slide-top 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
        }

        /* ----------------------------------------------
                                                                                                                                                                                                                                                         * Generated by Animista on 2022-5-20 19:36:31
                                                                                                                                                                                                                                                         * Licensed under FreeBSD License.
                                                                                                                                                                                                                                                         * See http://animista.net/license for more info.
                                                                                                                                                                                                                                                         * w: http://animista.net, t: @cssanimista
                                                                                                                                                                                                                                                         * ---------------------------------------------- */

        /**
                                                                                                                                                                                                                                                         * ----------------------------------------
                                                                                                                                                                                                                                                         * animation slide-top
                                                                                                                                                                                                                                                         * ----------------------------------------
                                                                                                                                                                                                                                                         */
        @-webkit-keyframes slide-top {
            0% {
                -webkit-transform: translateY(0);
                transform: translateY(0);
            }

            100% {
                -webkit-transform: translateY(-15px);
                transform: translateY(-15px);
            }
        }

        @keyframes slide-top {
            0% {
                -webkit-transform: translateY(0);
                transform: translateY(0);
            }

            100% {
                -webkit-transform: translateY(-15px);
                transform: translateY(-15px);
            }
        }

        .btn:focus,
        .btn:active {
            outline: none !important;
            box-shadow: none;
        }
    </style>

@endsection





@section('content')


    <div class="row no-gutter bg-white" id="app">
        <div class="col-md-5 d-none d-sm-block d-md-block" id="event-list">

            <div v-if="showDetail == false" class="py-3 px-4 mt-4">
                <input type="text" class="form-control" placeholder="Cari Event" @keyup.enter="search" v-model="keyword">
                <div class="d-flex mt-3 flex-wrap">
                    {{-- category filter --}}
                    <button @click="toggleCategory(0)" :class="{ 'btn-primary': filter.cat == 0 }"
                        class="btn btn-sm btn-outline-primary rounded-pill">All</button>

                    <button v-for="(category,i) in categories" :key="i" @click="toggleCategory(category.id)"
                        :class="{ 'btn-primary': filter.cat == category.id }" v-text="category.name"
                        class="mx-1 btn btn-sm btn-outline-primary rounded-pill"></button>


                    <div style="background-color: rgb(212, 217, 221); width: 2px;height: 30px" class="mx-2"></div>

                    {{-- time filter --}}

                    <button @click="toggleDate(1)" :class="{ 'btn-success': filter.date == 1 }"
                        class="btn btn-sm btn-outline-success rounded-pill">This week</button>
                    <button @click="toggleDate(2)" :class="{ 'btn-success': filter.date == 2 }"
                        class="btn btn-sm btn-outline-success mx-1 rounded-pill">This month</button>
                    <button @click="toggleDate(3)" :class="{ 'btn-success': filter.date == 3 }"
                        class="btn btn-sm btn-outline-success rounded-pill">This year</button>

                </div>
            </div>

            <div v-if="isLoading == true">
                <shimmer-card></shimmer-card>
                <shimmer-card></shimmer-card>
                <shimmer-card></shimmer-card>
            </div>


            {{-- detail --}}
            <event-detail class="slide-top" v-if="showDetail == true" :name="detail.name"
                :description="detail.description" category="detail.category.name" :content="detail.content"
                :photo="detail.photo" :date="detail.start_date" :location="detail.location" :link="detail.link"
                organizer="jik">
                <button @click="showDetail = false" class="close-btn">
                    x
                </button>
            </event-detail>



            {{-- new list --}}

            <div id="card-list-view" v-for="(event,i) in events" :key="i"
                v-if="isLoading == false && showDetail == false" @click="eventDetail(event.properties)">
                <event-card :name="event.properties.name" :description="event.properties.description"
                    :category="event.properties.category_name" :date="event.properties.start_date"
                    :photo="event.properties.photo">
                </event-card>
                <hr>
            </div>

        </div>
        <div class="col-md-7">
            <div id="mapid"></div>
        </div>

    </div>



    <!-- Leaflet JavaScript -->
    <!-- Make sure you put this AFTER Leaflet's CSS -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
        integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
        crossorigin=""></script>
    <!-- marker groups ext -->
    <script src="https://unpkg.com/leaflet.markercluster@1.3.0/dist/leaflet.markercluster.js"></script>
    <script>
        new Vue({
            el: '#app',
            data: () => ({
                keyword: '',
                categories: [],
                filter: {
                    cat: 0,
                    date: 1,
                },

                message: 'Hello Vue!',
                centerPos: {
                    lat: -7.797068,
                    lng: 110.370529
                },
                zoom: 20,
                map: null,
                events: [],
                isLoading: false,
                layer: null,
                showDetail: false,
                detail: {}
            }),

            mounted() {
                this.initMap()
                this.loadJogjaBounds()
                this.loadPopularPlaces()
                this.getCategories()
                this.getEvents(this.centerPos.lat, this.centerPos.lng);
            },

            methods: {
                getCategories() {
                    fetch('/api/categories')
                        .then(r => r.json())
                        .then(d => this.categories = d)
                        .catch(e => this.showAlert('fail load categories'))
                },

                debounce(func, wait, immediate) {
                    var timeout;

                    return function executedFunction() {
                        var context = this;
                        var args = arguments;

                        var later = function() {
                            timeout = null;
                            if (!immediate) func.apply(context, args);
                        };

                        var callNow = immediate && !timeout;

                        clearTimeout(timeout);

                        timeout = setTimeout(later, wait);

                        if (callNow) func.apply(context, args);
                    }
                },

                async loadJogjaBounds() {
                    let d = await fetch('/api/geojson/yogyakarta-province').then(r => r.json())
                    let map = this.map
                    this.layer = L.geoJSON(d, {
                            pointToLayer: (geoJsonPoint, latlng) => L.marker(latlng),
                            onEachFeature: function onEachFeature(feature, layer) {
                                layer.on({
                                    click: (e) => {
                                        map.fitBounds(e.target.getBounds())
                                    }
                                });
                            },
                            style: function polystyle(feature) {
                                return {
                                    fillColor: 'grey',
                                    weight: 2,
                                    opacity: 1,
                                    color: 'grey',
                                    dashArray: '3',
                                    fillOpacity: 0.1
                                };
                            }

                        })
                        .addTo(this.map);

                },

                toggleCategory(id) {
                    this.filter.cat = id;
                    let url = id != 0 ? `/api/locations?cat=${id}` : '/api/locations'
                    this.isLoading = true;
                    this.map.removeLayer(this.layer);
                    fetch(url)
                        .then(r => r.json())
                        .then(d => {
                            // set loading to false 
                            this.isLoading = false;
                            // bind to data
                            this.events = d.features;

                            // load geoJSON
                            const {
                                eventDetail
                            } = this
                            this.layer = L.geoJSON(d, {
                                    pointToLayer: (geoJsonPoint, latlng) => L.marker(latlng)
                                })
                                .bindPopup(function(layer) {
                                    eventDetail(layer.feature.properties)
                                    let htmlContent =
                                        `   <div class="my-2"><strong>Place Name</strong> :<br>  ${layer.feature.properties.name} </div> 
                                            <div class="my-2"><strong>Description</strong>:<br>  ${layer.feature.properties.description}  </div>
                                            <div class="my-2"><strong>Address</strong>:<br>  ${layer.feature.properties.location}  </div>`
                                    return htmlContent;
                                })
                                .on('click', (e) => {
                                    this.map.setView([e.latlng.lat, e.latlng.lng], 30)
                                })
                                .addTo(this.map);
                        })

                },


                search() {
                    let isNotNull = this.keyword && this.keyword != ''
                    if (isNotNull) {
                        let url = `/api/locations?keyword=${encodeURI(this.keyword)}`
                        this.isLoading = true;
                        this.map.removeLayer(this.layer);
                        fetch(url)
                            .then(r => r.json())
                            .then(d => {
                                // set loading to false 
                                this.isLoading = false;
                                // bind to data
                                this.events = d.features;

                                // load geoJSON
                                const {
                                    eventDetail
                                } = this
                                this.layer = L.geoJSON(d, {
                                        pointToLayer: (geoJsonPoint, latlng) => L.marker(latlng)
                                    })
                                    .bindPopup(function(layer) {
                                        eventDetail(layer.feature.properties)
                                        let htmlContent =
                                            `   <div class="my-2"><strong>Place Name</strong> :<br>  ${layer.feature.properties.name} </div> 
                                            <div class="my-2"><strong>Description</strong>:<br>  ${layer.feature.properties.description}  </div>
                                            <div class="my-2"><strong>Address</strong>:<br>  ${layer.feature.properties.location}  </div>`
                                        return htmlContent;
                                    })
                                    .on('click', (e) => {
                                        this.map.setView([e.latlng.lat, e.latlng.lng], 30)
                                    })
                                    .addTo(this.map);
                            })
                    }
                },

                toggleDate(id) {
                    this.filter.date = id;
                    let dateParsed = id == 1 ? 'week' : id == 2 ? 'month' : 'year';
                    let url = id != 0 ? `/api/locations?date=${dateParsed}` : '/api/locations'

                    this.isLoading = true;
                    this.map.removeLayer(this.layer);
                    fetch(url)
                        .then(r => r.json())
                        .then(d => {
                            // set loading to false 
                            this.isLoading = false;
                            // bind to data
                            this.events = d.features;

                            // load geoJSON
                            const {
                                eventDetail
                            } = this
                            this.layer = L.geoJSON(d, {
                                    pointToLayer: (geoJsonPoint, latlng) => L.marker(latlng)
                                })
                                .bindPopup(function(layer) {
                                    eventDetail(layer.feature.properties)
                                    let htmlContent =
                                        `   <div class="my-2"><strong>Place Name</strong> :<br>  ${layer.feature.properties.name} </div> 
                                            <div class="my-2"><strong>Description</strong>:<br>  ${layer.feature.properties.description}  </div>
                                            <div class="my-2"><strong>Address</strong>:<br>  ${layer.feature.properties.location}  </div>`
                                    return htmlContent;
                                })
                                .on('click', (e) => {
                                    this.map.setView([e.latlng.lat, e.latlng.lng], 30)
                                })
                                .addTo(this.map);
                        })
                },

                initMap() {
                    this.map = L
                        .map('mapid')
                        .setView([this.centerPos.lat, this.centerPos.lng], this.zoom);

                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                        // maxNativeZoom: 19,
                        // maxZoom: 23
                    }).addTo(this.map);

                    let onMoveEnd = this.debounce(() => {
                        this.showDetail = false
                        this.detail = {}
                        let {
                            lat,
                            lng
                        } = this.map.getCenter()

                        this.map.removeLayer(this.layer);
                        this.getEvents(lat, lng)
                    }, 300)

                    this.map.on("dragend", onMoveEnd);

                },

                async loadPopularPlaces() {
                    let response = await fetch('/api/popular-places/all').then(r => r.json())
                    let popularPlaces = Array.from(response)

                    var legend = L.control({
                        position: 'topright'
                    });
                    legend.onAdd = function(map) {

                        var div = L.DomUtil.create('div', 'popular-places')

                        div.innerHTML = popularPlaces.map(it =>
                            `<button class='btn btn-sm btn-outline-primary rounded-pill'>${it.name}</button>`
                        )
                        return div;
                    };

                    legend.addTo(this.map);
                },

                eventDetail(property) {
                    this.map.setView([property.lat, property.lng], 30)
                    this.showDetail = true;
                    fetch(`/api/location/${property.id}`).then(r => r.json()).then(d => this.detail = d)
                },

                getEvents(lat, lng) {
                    this.isLoading = true;
                    fetch(`/api/locations?lat=${lat}&lng=${lng}`)
                        .then(r => r.json())
                        .then(d => {
                            // set loading to false 
                            this.isLoading = false;
                            // bind to data
                            this.events = d.features;

                            // load geoJSON
                            const {
                                eventDetail
                            } = this
                            this.layer = L.geoJSON(d, {
                                    pointToLayer: (geoJsonPoint, latlng) => L.marker(latlng)
                                })
                                .bindPopup(function(layer) {
                                    eventDetail(layer.feature.properties)
                                    let htmlContent =
                                        `   <div class="my-2"><strong>Place Name</strong> :<br>  ${layer.feature.properties.name} </div> 
                                            <div class="my-2"><strong>Description</strong>:<br>  ${layer.feature.properties.description}  </div>
                                            <div class="my-2"><strong>Address</strong>:<br>  ${layer.feature.properties.location}  </div>`
                                    return htmlContent;
                                })
                                .on('click', (e) => {
                                    this.map.setView([e.latlng.lat, e.latlng.lng], 30)
                                })
                                .addTo(this.map);
                        })
                }
            }
        })
    </script>
@endsection
